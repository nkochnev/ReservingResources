// <auto-generated />
using System;
using ReserveBot.Storage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ReserveBot.Storage.Migrations
{
    [DbContext(typeof(ReserveBotContext))]
    [Migration("20191002173343_initMigration")]
    partial class initMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ReserveBot.Storage.Tables.AccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Name");

                    b.Property<string>("TelegramLogin");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ReserveBot.Storage.Tables.AccountInTeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("AccountId");

                    b.Property<Guid>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TeamId");

                    b.ToTable("AccountInTeams");
                });

            modelBuilder.Entity("ReserveBot.Storage.Tables.ReserveEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("ExpiredIn");

                    b.Property<DateTime>("From");

                    b.Property<DateTime?>("Released");

                    b.Property<Guid>("ReservedByAccountId");

                    b.Property<Guid>("ResourceId");

                    b.HasKey("Id");

                    b.HasIndex("ReservedByAccountId");

                    b.HasIndex("ResourceId");

                    b.ToTable("Reserves");
                });

            modelBuilder.Entity("ReserveBot.Storage.Tables.ResourceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("DomainName");

                    b.Property<string>("Name");

                    b.Property<int>("ResourceType");

                    b.Property<Guid>("TeamId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("ReserveBot.Storage.Tables.TeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("ReserveBot.Storage.Tables.AccountInTeamEntity", b =>
                {
                    b.HasOne("ReserveBot.Storage.Tables.AccountEntity", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReserveBot.Storage.Tables.TeamEntity", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReserveBot.Storage.Tables.ReserveEntity", b =>
                {
                    b.HasOne("ReserveBot.Storage.Tables.AccountEntity", "ReservedByAccount")
                        .WithMany("Reserves")
                        .HasForeignKey("ReservedByAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReserveBot.Storage.Tables.ResourceEntity", "Resource")
                        .WithMany("Reserves")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReserveBot.Storage.Tables.ResourceEntity", b =>
                {
                    b.HasOne("ReserveBot.Storage.Tables.TeamEntity", "Team")
                        .WithMany("Resources")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
